{"version":3,"sources":["mastercard_logo.svg","sub.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SubscriptionUI","className","type","src","SVG","alt","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,6C,wKCiE5BC,G,MA5DQ,kBACrB,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,uBACb,8CAGF,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,6BACb,oCAEF,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,QAAb,cACA,uBAAGA,UAAU,oBAAb,oBACA,4BAAQC,KAAK,UAAb,iBAIJ,yBAAKD,UAAU,uBACb,yBAAKA,UAAU,6BACb,kDAEF,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,oBAAb,yDAMJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,6BACb,8CAEF,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,sBACb,yBAAKE,IAAKC,IAAKC,IAAI,qBACnB,gEAEF,uBAAGJ,UAAU,QAAb,aAGJ,uBAAGK,KAAK,KAAR,0BAIJ,yBAAKL,UAAU,uBACb,yBAAKA,UAAU,6BACb,+CAEF,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,oBAAb,mBACA,uBAAGA,UAAU,oBAAb,8BCjCKM,MAnBf,WACE,OAcE,kBAAC,EAAD,OCTgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.746dd3bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mastercard_logo.e79abe47.svg\";","import React from 'react';\n\nimport SVG from './mastercard_logo.svg';\nimport './sub.styles.scss';\n\nconst SubscriptionUI = () => (\n  <div className=\"subscription-page\">\n    <div className=\"subscription-container\">\n      <div className=\"subscription__block\">\n        <h2>Plan Overview</h2>\n      </div>\n\n      <div className=\"subscription__block\">\n        <div className=\"subscription__block--left\">\n          <p>Plan</p>\n        </div>\n        <div className=\"subscription__block--right\">\n          <p className=\"bold\">Basic Plan</p>\n          <p className=\"color--dark-blue\">N3,000 per month</p>\n          <button type=\"submit\">Cancel Plan</button>\n        </div>\n      </div>\n\n      <div className=\"subscription__block\">\n        <div className=\"subscription__block--left\">\n          <p>Next Billing Cycle</p>\n        </div>\n        <div className=\"subscription__block--right\">\n          <p className=\"color--dark-blue\">\n            Your next charge of N3,000 will be on June 12, 2020\n          </p>\n        </div>\n      </div>\n\n      <div className=\"subscription__block\">\n        <div className=\"subscription__block--left\">\n          <p>Payment Method</p>\n        </div>\n        <div className=\"subscription__block--right\">\n          <div className=\"payment\">\n            <div className=\"card_details\">\n              <div className=\"card_details--logo\">\n                <img src={SVG} alt=\"Master Card Logo\" />\n                <p>...ending in 4678. Expires 10/22</p>\n              </div>\n              <p className=\"bold\">Primary</p>\n            </div>\n          </div>\n          <a href=\"#\">Add a payment method</a>\n        </div>\n      </div>\n\n      <div className=\"subscription__block\">\n        <div className=\"subscription__block--left\">\n          <p>Billing Details</p>\n        </div>\n        <div className=\"subscription__block--right\">\n          <p className=\"color--dark-blue\">Access Bank Plc</p>\n          <p className=\"color--dark-blue\">hello@accessbank.com</p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default SubscriptionUI;\n","import React from 'react';\n// import SVG from './404.svg';\n\nimport SubcriptionUI from './sub'\n// import './App.css';\n\nfunction App() {\n  return (\n    // <div className=\"app__container\">\n    //   <div className=\"app__image\">\n    //     <img src={SVG} alt=\"A boy lost in space\" height=\"70%\" width=\"70%\" />\n    //   </div>\n    //   <div className=\"app__text\">\n    //     <h1 className=\"app__text--big\">An error occurred</h1>\n    //     <p className=\"app__text--small\">\n    //       Seems like you got lost.\n    //       <span className=\"app__text--link\"> <a href=\"#\">Reload</a> </span>\n    //       this page to try again.\n    //     </p>\n    //   </div>\n    // </div>\n    <SubcriptionUI />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}